name: Auto-Update package versions
on:
  pull_request_target:
    types:
      - labeled
      - unlabeled
      - created

jobs:
  remove-package-upgrade-label:
    if: ${{ github.event.label }} # If PR was triggered with label
    runs-on: ubuntu-latest 
    steps:
      - uses: actions-ecosystem/action-remove-labels@v1
        with:
          number: ${{ github.event.number }}
          labels: apply-version-upgrade

  package-auto-updater:
    # If this event is for a PR creation, or has a specific label
    if: |
      ${{ 
        !github.event.label 
        || github.event.label.name == 'major-version' 
        || github.event.label.name == 'minor-version' 
        || github.event.label.name == 'patch-version' 
        ||  (
              github.event.label.name == 'apply-version-upgrade' 
              && github.event.action == 'labeled'
              && (
                contains(github.event.pull_request.labels.*.name, 'patch-version')
                || contains(github.event.pull_request.labels.*.name, 'minor-version')
                || contains(github.event.pull_request.labels.*.name, 'major-version')
              )
            )
      }}
    runs-on: ubuntu-latest
    concurrency: auto-updater-${{ github.event.pull_request.head.ref }}
    steps:
      - name: checkout source
        uses: actions/checkout@v3
        with:
          ref: ${{github.event.pull_request.head.ref}}
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: '0'
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
      - name: merge base into PR branch
        run: | 
          git pull origin ${{ github.event.pull_request.base.ref }} --no-rebase;
      - name: increment package versions
        run: |
          if ${{ contains(github.event.pull_request.labels.*.name, 'major-version') }}; then
            VERSION_UPGRADE_TYPE="--major";
          elif ${{ contains(github.event.pull_request.labels.*.name, 'minor-version') }}; then
            VERSION_UPGRADE_TYPE="--minor";
          elif ${{ contains(github.event.pull_request.labels.*.name, 'patch-version') }}; then
            VERSION_UPGRADE_TYPE="--patch";
          else
            git checkout origin/${{ github.event.pull_request.base.ref }} -- package.json;
            BASE_VERSION=$(
              cat package.json \
                | grep "^\s*\"version\": \"" \
                | awk '{ print $2 }' \
                | sed 's|[",]||g'
              );
            git reset --hard HEAD;
            VERSION_UPGRADE_TYPE="--new-version $BASE_VERSION";
          fi

          yarn version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/cspell version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/errors version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/eslint-config-nori version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/ggit version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/math version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/project version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;
          yarn workspace @nori-dot-com/quantification version $VERSION_UPGRADE_TYPE --no-git-tag-version --no-commit-hooks;

          git add .;
          git diff --staged --quiet || git commit -m "Upgrading package versions";
      - name: push updates to pr branch
        run: git push;
